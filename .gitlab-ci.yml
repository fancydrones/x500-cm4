variables:
  BUILDX_VER: "0.8.2"
  KUSTOMIZE_VER: "4.5.5"

stages:
- prebuild
- build
- deploy

prepare-build-tag:
  stage: prebuild
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag="1.0.$CI_PIPELINE_IID"
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = $tag"
      else
        tag="$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - echo "BUILD_TAG=$tag" >> build.env
  artifacts:
    reports:
      dotenv: build.env


build-streamer:
  image: docker:latest
  stage: build
  needs:
    - job: prepare-build-tag
      artifacts: true

  services:
    - name: docker:dind
      command: ["--experimental"]

  before_script:
    # Prepare BuildX
    - mkdir -p ~/.docker/cli-plugins
    - wget -O ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v${BUILDX_VER}/buildx-v${BUILDX_VER}.linux-amd64
    - chmod a+x ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
    - docker login -u "$CI_USER" -p "$CI_PASSWORD" $CI_REGISTRY
  
  script:
    - docker buildx build
      --platform linux/aarch64
      --tag "$CI_IMAGE_STREAMER:${tag}"
      --push
      ./streamer
  artifacts:
    reports:
      dotenv: build.env

build-router:
  image: docker:latest
  stage: build
  needs:
    - job: prepare-build-tag
      artifacts: true
  services:
    - name: docker:dind
      command: ["--experimental"]

  before_script:
    # Prepare BuildX
    - mkdir -p ~/.docker/cli-plugins
    - wget -O ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v${BUILDX_VER}/buildx-v${BUILDX_VER}.linux-amd64
    - chmod a+x ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
    - docker login -u "$CI_USER" -p "$CI_PASSWORD" $CI_REGISTRY
  
  script:
    - docker buildx build
      --platform linux/aarch64
      --tag "$CI_IMAGE_ROUTER:${tag}"
      --push
      ./router

build-announcer:
  image: docker:latest
  stage: build
  needs:
    - job: prepare-build-tag
      artifacts: true
  services:
    - name: docker:dind
      command: ["--experimental"]

  before_script:
    # Prepare BuildX
    - mkdir -p ~/.docker/cli-plugins
    - wget -O ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v${BUILDX_VER}/buildx-v${BUILDX_VER}.linux-amd64
    - chmod a+x ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
    - docker login -u "$CI_USER" -p "$CI_PASSWORD" $CI_REGISTRY
  
  script:
    - docker buildx build
      --platform linux/aarch64
      --tag "$CI_IMAGE_ANNOUNCER:${tag}"
      --push
      ./announcer

update-manifest:
  needs:
    - job: prepare-build-tag
      artifacts: true
    - job: build-streamer
    - job: build-router
    - job: build-announcer
  image: alpine:latest
  stage: deploy

  before_script:
    # Prepare Git and Kustomize
    - echo "before"
    - apk --no-cache add git curl gettext openssh
    - curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VER}/kustomize_v${KUSTOMIZE_VER}_linux_amd64.tar.gz -o kustomize.tar.gz
    - tar -xvzf kustomize.tar.gz && mv kustomize /usr/bin/kustomize && chmod +x /usr/bin/kustomize
    - git config --global user.email "rpiuav@got.vision"
    - git config --global user.name "RPi UAV Builder"

  script:
    - echo "Deploying tag ${BUILD_TAG}"
    - git clone https://gitlab.com/got.vision/rpiuav.git

    # Patch Streamer
    - rm kustomization.yaml -f
    - kustomize create
    - kustomize edit set image registry.gitlab.com/got.vision/rpiuav/streamer:${BUILD_TAG}
    - kustomize edit add resource rpiuav/deployments/rpi4-serial/manifests/streamer.yaml
    - kustomize build . > x.yaml
    - mv x.yaml rpiuav/deployments/rpi4-serial/manifests/streamer.yaml

    # Patch Router
    - rm kustomization.yaml -f
    - kustomize create
    - kustomize edit set image registry.gitlab.com/got.vision/rpiuav/router:${BUILD_TAG}
    - kustomize edit add resource rpiuav/deployments/rpi4-serial/manifests/router.yaml
    - kustomize build . > x.yaml
    - mv x.yaml rpiuav/deployments/rpi4-serial/manifests/router.yaml

    # Patch Announcer
    - rm kustomization.yaml -f
    - kustomize create
    - kustomize edit set image registry.gitlab.com/got.vision/rpiuav/announcer:${BUILD_TAG}
    - kustomize edit add resource rpiuav/deployments/rpi4-serial/manifests/announcer.yaml
    - kustomize build . > x.yaml
    - mv x.yaml rpiuav/deployments/rpi4-serial/manifests/announcer.yaml
    
    # Push update
    - cd rpiuav/
    - git remote add mani-repo https://${CI_USER}:${CI_PASSWORD}@gitlab.com/got.vision/rpiuav.git
    - git add .
    - git commit -m "Update versions to ${BUILD_TAG}"
    - git push --push-option=ci.skip mani-repo main
