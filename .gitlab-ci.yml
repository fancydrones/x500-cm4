variables:
  BUILDX_VER: "0.8.2"
  KUSTOMIZE_VER: "4.5.5"

stages:
- prebuild
- build

.install_buildx: &install_buildx
  - echo "Install BuildX"
  - mkdir -p ~/.docker/cli-plugins
  - wget -O ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v${BUILDX_VER}/buildx-v${BUILDX_VER}.linux-amd64
  - chmod a+x ~/.docker/cli-plugins/docker-buildx
  - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  - docker buildx create --use
  - docker login -u "$CI_USER" -p "$CI_PASSWORD" $CI_REGISTRY

.install_kustomize: &install_kustomize
  - echo "Install Kustomize"
  - apk --no-cache add git curl gettext openssh
  - curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VER}/kustomize_v${KUSTOMIZE_VER}_linux_amd64.tar.gz -o kustomize.tar.gz
  - tar -xvzf kustomize.tar.gz && mv kustomize /usr/bin/kustomize && chmod +x /usr/bin/kustomize
  - git config --global user.email "rpiuav@got.vision"
  - git config --global user.name "RPi UAV Builder"

.build_image: &build_image
  - echo "Building tag $IMAGE_TAG:${BUILD_TAG}"
  - docker buildx build
      --platform linux/aarch64
      --tag "$IMAGE_TAG:${BUILD_TAG}"
      --push
      ./$APP_DIR

.update_image_tag: &update_image_tag
  - echo "Deploying tag IMAGE_TAG:${BUILD_TAG}"
  - git clone https://gitlab.com/got.vision/rpiuav.git
  # Patch
#  - rm kustomization.yaml -f
  - kustomize create
  - kustomize edit set image registry.gitlab.com/got.vision/rpiuav/$APP_NAME:${BUILD_TAG}
  - kustomize edit add resource rpiuav/deployments/rpi4/apps/$APP_NAME.yaml
  - kustomize build . > x.yaml
  - mv x.yaml rpiuav/deployments/rpi4/apps/$APP_NAME.yaml
  # Push update
  - cd rpiuav/
  - git remote add mani-repo https://${CI_USER}:${CI_PASSWORD}@gitlab.com/got.vision/rpiuav.git
  - git add .
  - git commit -m "Update $IMAGE_TAG versions to ${BUILD_TAG}"
  - git push --push-option=ci.skip mani-repo main

prepare-build-tag:
  stage: prebuild
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag="1.0.$CI_PIPELINE_IID"
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = $tag"
      else
        tag="$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - echo "BUILD_TAG=$tag" >> build.env  
  artifacts:
    reports:
      dotenv: build.env

.build_image_template:
  image: docker:latest
  stage: build
  dependencies:
    - prepare-build-tag
  services:
    - name: docker:dind
      command: ["--experimental"]
  script:
    - *install_buildx
    - *install_kustomize
    - *build_image
    - *update_image_tag

build-streamer:
  extends: .build_image_template
  variables:
    IMAGE_TAG: $CI_IMAGE_STREAMER
    APP_DIR: apps/streamer
    APP_NAME: streamer
  only:
    changes:
      - apps/streamer/*

build-router:
  extends: .build_image_template
  variables:
    IMAGE_TAG: $CI_IMAGE_ROUTER
    APP_DIR: apps/router
    APP_NAME: router
  only:
    changes:
      - apps/router/*

build-announcer:
  extends: .build_image_template
  variables:
    IMAGE_TAG: $CI_IMAGE_ANNOUNCER
    APP_DIR: apps/announcer
    APP_NAME: announcer
  only:
    changes:
      - apps/announcer/*

build-companion:
  extends: .build_image_template
  variables:
    IMAGE_TAG: $CI_IMAGE_COMPANION
    APP_DIR: apps/companion
    APP_NAME: companion
  only:
    changes:
      - apps/companion/*
